*****************************************************
    Learning SASS from scratch with The net.ninja
*****************************************************

Introduction:
- SASS is an extension to CSS that can help us write more fexible style
- Use variable, functions, conditional statements and more.
- split our SASS files up into modules, making it easier to keep on top of CSS for large project.
- SASS is written in RUBY

NB: The browser will not understand our SASS code, therefore we need to translate it into CSS code.

What we should know first?
- SASS looks similar with a programming language, so we should be comfortable with those progrmming fundamentals
  such as functions, variables, condition,... 
- CSS

Installing and compiling SASS:
- There are 2 ways to install SASS on our computer:
  First of all, by using command line but for that we need to install Rubi first because it is writting with it.
  And then by using a stand alone application.
  Here is the link https://sass-lang.com/install

  All steps by using command line:
  - install Rubi (https://rubyinstaller.org/downloads/)
  - add this path: source\Ruby31-x64\bin it on path variable.
  - install sass 
    > gem install sass
    > sass -v (to check if sass is installed)

---------------------------------
  With CoderCode
---------------------------------

What is SASS?
- SASS is a CSS extension language, and gives our CSS superpower.
- SASS is an easiest way for developper to write CSS but we need to translate it to CSS code so that the browser can 
understand the code.

There are two syntax to write SASS code:

example:
  .sass (don't need brackets)
  
  $font-stack: Helvetica, sans-serif
  $primary-color: #333

  body
    font: 100% $font-stack
    color: $primary-color

  .scss

  $font-stack: Helvetica, sans-serif;
  $primary-color: #333;

  body {
    font: 100% $font-stack;
    color: $primary-color;
  }

  .css
  body {
    font: 100% Helvetica, sans-serif;
    color: #333;
  }

How to compile SASS?
With visual studio, we can use live compiler sass extension.
After installing it, set your json setting (visual studio setting).

- The map css file tell us about the location of sass file.

SASS Partials:
Allows us to split up our code into multiple styles, to keep more organize our code.
This allows us to modularize our CSS code and allows us for better structure of our 
stylesheet.
A partial is a sass file named with a leading underscore, i.e _partial.scss.

The underscore lets sass know that the specific file is a partial and will not generate
into a css file.

Avantages:
- easy to debug
- allows us to works with others developpers in the same time

1- Getting start with SASS code: 
@forward rules
https://sass-lang.com/documentation/at-rules/forward

The rule is written @forward "<url>". It loads the module at the given URL just like @use,
but it makes the public members of the loaded module available to users of your module as though they were defined directly in your module

Variables:
We use variables to refers things like font-size, color, spacing and so on...

https://sass-lang.com/documentation/variables

SASS variables are simple: you assign a value to a name that begins with $, and then you can refer to that name instead of the value itself.
But despite their simplicity, they're one of the most useful tools Sass brings to the table.

Pros: (Avantages)
Variables make it possible to reduce repetition, do complex math, configure libraries, and much more.

Syntax:
<variable>: <expression>

Example:
$font-size: 12px;


/* Remind */
The root selector: 
The :root selector allows us to target the highest-level “parent” element in the DOM, or document tree.

@use rules:
The @use rule loads mixins, functions, and variables from other Sass stylesheets, and combines CSS from multiple stylesheets together. 
Stylesheets loaded by @use are called "modules".

  NB: @use rules must be written before any other rules.
The simplest @use rule is written @use "<url>", which loads the module at the given URL.
43:..=> Responsive design

Nesting Styles:
(imbriquées)
Example:
 div{
   margin:0px;
   ul{
     padding:0px
   }
 }

 Mixins:
 @Mixin rules 
 Mixin allows us to define styles that can be re-used throughout our stylesheet.

 Mixins are defined using the @mixin at-rule, which is written 
 @mixin <name> { ... } or @mixin name(<arguments...>) { ... }

 Example:
 @mixin reset-list {
    margin: 0;
    padding: 0;
    list-style: none;
  }

Mixin is a chunk of a reusable of css or sass  

Example:
@mixin banner {
    width: 100%;
    position: relative;
    color: white;
    .banner-content{
        position: absolute;
        width: 100%;
        top: 50px;
        right: 15px;
    }

    img{
        width: 100%;
    }

    span{
        font-size: u.$bannerHeading;
        display: block;
        text-transform: uppercase;
        font-weight: bold;
    }

    span.title{
        margin-bottom: 10px;
        font-weight: normal;
    }
}

.lessons-banner{
    @include banner;
}

@mixin google-font($family) {
  @import url("http://fonts.googleapis.com/css?family=#{$family}");
}

@include google-font("Droid Sans");



Import:
@import rules
Sass extends CSS's @import rule with the ability to import Sass and CSS stylesheets, 
providing access to mixins, functions, and variables and combining multiple stylesheets' 
CSS together.

Example:
@import 'foundation/code', 'foundation/lists';


Pseudo Class:
&:...

Example:
         li{
            list-style-type: none;
            padding: 15px;
            height: 20px;
            flex-grow: 0;
            flex-shrink: 1;

            a{
                text-decoration: none;
                color: white;
                font-size: u.$font-size-normal;
                font-family: u.$font-lato;
                text-align: center;
            }

            &:hover{
                background-color: rgba(128, 128, 128, 0.444);
            }   
        }

Math operators: 
available link: https://sass-lang.com/documentation/operators

In SASS we have an available tools such as :
- the addition, multiplication, subtraction,... Mathematicals operators

- SASS supports a handful of useful operators for working with different values.
These include the standard mathematical operators like + and *, as well as operators 
for various other types:


   .  == and != are used to check if two values are the same.
   .  +, -, *, /, and % have their usual mathematical meaning for numbers, 
      with special behaviors for units that matches the use of units in scientific math.
   .  <, <=, >, and >= check whether two numbers are greater or less than one another.
   .  and, or, and not have the usual boolean behavior. Sass considers every value “true” except for false and null.
   .  +, -, and / can be used to concatenate strings.

Order of operations:

   1- The unary operators not, +, -, and /.
   2- The *, /, and % operators.
   3- The + and - operators.
   4- The >, >=, < and <= operators.
   5- The == and != operators.
   6- The and operator.
   7- The or operator.
   8- The = operator, when it’s available.

  Creating Grid with Math Operators:
  
  @mixin grid($cols, $margin) {
      float: left;
      margin-right: $margin;
      margin-bottom: $margin;
      width: ((100% - (($cols - 1) * $margin))/$cols);
      &:nth-child(#{$cols}n){
          margin-right: 0;
      }
  }

@Content aka Content directive:
This directive is "simple", it allows us to reduce repetitive code.

But knowing when to use @content in advance is a touch harder. Here are 
at least 5 common use cases and examples from around the web.

Uses Cases for The Content Directive, aka @content

Use @contentfor :

    1- @media queries,
    2- keyframes animation,
    3- buttons,
    4- nested selectors,
    5- notifications

If you have other times you use @content, drop a comment so others can see other uses cases.
Who Is This For?

Newish to using SCSS and would like multiple examples/context for how to use the @content.

1- @media queries:
// located in _mixin.scss partial file
@mixin small-screen {
  @media screen and (min-width: 800px;) {
    @content;
  }
}

// located in /modules/_media.scss partial file
@include small-screen {
  .container {
    width: 600px;
  }
}

// above mixin and @media become:
@media screen and (min-width: 800px;) {
   .container {
      width: 600px;
    }
}

2- keyframes & animation

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

// located in modules/_keyframes.scss
@include keyframes(fadeIn) {
  from {
    opacity: 0%;
  }
  to {
    opacity: 100%;
  }
}

// The above mixin and @contents compiles into styles.css:
@-webkit-keyframes fadeIn {
  from {
    opacity: 0%;
  }
  to {
    opacity: 100%;
  }
}

@-moz-keyframes fadeIn {
  from {
    opacity: 0%;
  }
  to {
    opacity: 100%;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0%;
  }
  to {
    opacity: 100%;
  }
}

check this link for more details: 
https://dev.to/brad_beggs/scss-content-use-cases-examples-261l
https://sass-lang.com/documentation/at-rules/mixin#content-blocks

@mixin hover {
  &:not([disabled]):hover {
    @content;
  }
}

.button {
  border: 1px solid black;
  @include hover {
    border-width: 2px;
  }
}

@if statement:
https://sass-lang.com/documentation/at-rules/control/if
Allows us to add a condition in our css.

Example:
@mixin theme-colors($light-theme: true) {
  @if $light-theme {
    background-color: $light-background;
    color: $light-text;
  } @else {
    background-color: $dark-background;
    color: $dark-text;
  }
}

.banner {
  @include theme-colors($light-theme: true);
  body.dark & {
    @include theme-colors($light-theme: false);
  }
}

The use of sass math:
Check this link, if you wanna know a little bit about sass:math

- Variables: 
  math.$e (expo)
  math.$pi (3.14)

- Bounding functions
  
  a) Ceil
  we use ceil function to round a number up to the next highest whole number.

  Example: 
  math.ceil(4); // 4
  math.ceil(4.2); // 5 
  math.ceil(4.9); // 5  
  
  b) Floor: 
  To round number down to the next lowest whole number.

  Example:
  math.ceil(4); // 4
  math.ceil(4.2); // 4 
  math.ceil(4.9); // 4  

  c) max, min, div, round, pow, sqrt, cos, sin, tan, percentage,...


@debug rules:
Check out the following link:
https://sass-lang.com/documentation/at-rules/debug

Sometime it's useful to see the value of an expression or a variable while 
we're developing our stylesheet. That’s what the @debug rule is for: it’s written 
@debug <expression>, and it prints the value of that expression, 
along with the filename and line number.


It allows us to debug our sass file.

Example: 
@debug "hello world"


The use of Maps:
https://sass-lang.com/documentation/values/maps

Maps is used like associative arrays in programming languages. Maybe a little bit like
an object in javascript. Basicaly, it's a way we can collect a lot of different variables.

It very useful for generating an utilities classes.
In sass, The map data type represents one or more key/value pair.

Syntax:
$syntax-map : (<key>:<value>);

NB: afaka ovana ny variable map fa tsy manova ny variable original.

  - To look up a value: map.get($map, "key"); // value.
  Example: 
  $font-weights: ("regular": 400, "medium": 500, "bold": 700);

  @debug map.get($font-weights, "medium"); // 500
  @debug map.get($font-weights, "extra-bold"); // null

  - Do something for every pair
  Example:
  $icons: ("eye": "\f112", "start": "\f12e", "stop": "\f12f");

  @each $name, $glyph in $icons {
    .icon-#{$name}:before {
      display: inline-block;
      font-family: "Icon Font";
      content: $glyph;
    }
  }

  - add to map:
  It’s also useful to add new pairs to a map, or to replace the value for an existing key.
  The map.set($map, $key, $value) function does this: it returns a copy of $map with the value 
  at $key set to $value.

  @use "sass:map";

  $font-weights: ("regular": 400, "medium": 500, "bold": 700);

  @debug map.set($font-weights, "extra-bold", 900);
  // ("regular": 400, "medium": 500, "bold": 700, "extra-bold": 900)
  @debug map.set($font-weights, "bold", 900);
  // ("regular": 400, "medium": 500, "bold": 900)


  We can also merge two existing maps usign map.merge($map1, $map2)

  @use "sass:map";

  $light-weights: ("lightest": 100, "light": 300);
  $heavy-weights: ("medium": 500, "bold": 700);

  @debug map.merge($light-weights, $heavy-weights);
  // ("lightest": 100, "light": 300, "medium": 500, "bold": 700)

  If both maps have the same keys, the second map’s values are used in
  the map that gets returned.



  Example:
  /* The use of maps */
  $map-example :("key1":"value1", "key2":"value2", "key3":"value3");

  @debug map-get($map-example, "key1");
  @debug map.get($map-example, "key3");
  @debug map.set($map-example, "key3", "value4");
  @debug map.merge($map-example, ("key4":"value4"));

  @each $key,$value in $map-example {
      @debug $value;
  }

About Color: sass:color  
https://sass-lang.com/documentation/modules/color
https://www.w3schools.com/sass/sass_functions_color.php 

  - For more details, please check the links above.
  - SASS Maniplate color function:
  
    mix($color1, $color2, weight) 
    => Creates a color that is a mix of color1 and color2. 
    The weight parameter must be between 0% and 100%. 
    A larger weight means that more of color1 should be used. 
    A smaller weight means that more of color2 should be used. Default is 50%.

    The use of ligthen and darken in sass: 
    These functions will return a colour lighter or darker respectively.

    Syntax:
    lighten($color, $amount) //=> color
    Makes $color lighter.
    The $amount must be a number between 0% and 100% (inclusive). Increases the HSL
    lightness of $color by that amount.

    Heads up: 
    lighten() is usually not the best way to make a color lighter, use scale instead.
    color.scale(#e1d7d2, $lightness: 30%);

Functions in sass:
https://sass-lang.com/documentation/at-rules/function
https://www.koderhq.com/tutorial/sass/mixin/


Example:
@function sum ($nb1, $nb2){
    @return $nb1+$nb2;
}

@debug sum(1,2)


Remind about CSS:
- box-sizing: this property allows us to include border and 
padding in element's total height and width.
If you set box-sizing: border-box; on an element, padding 
and border are included in the width and height.

Another feature that we can use with sass is extends feature.
@extend rules
https://www.w3schools.com/sass/sass_extend.php

The @extend directive let us to share a set of css properties from one selector
to another selector. (Inheritance)

It is useful if we have almost identically styled elements that only differ in some 
small details.

NB:
By using the extend directive we don't need to specify several classes for an element
in our HTML code. It keeps our sass code very dry.

Example:
.flex-layout{
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-sizing: border-box;
}

.navbar{

    @extend .flex-layout;
    padding: $base-padding $base-padding *2 ;
    box-shadow: $base-box-shadow;

    .nav-title{
        font-size: $font-size-xl;
    }

    .container{
        @extend .flex-layout;
    }
}

Another example:























    


